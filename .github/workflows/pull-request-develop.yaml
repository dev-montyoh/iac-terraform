name: 'Terraform Validate on PR to develop'

on:
  pull_request:
    branches:
      - 'develop'

env:
  TF_CLOUD_ORGANIZATION: "dev-monty"
  TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}"
  TF_WORKSPACE: "iac-terraform"
  CONFIG_DIRECTORY: "./"

jobs:
  terraform-validate:
    name: 'Terraform Validate'
    runs-on: ubuntu-latest

    steps:
      # 코드 체크아웃
      - name: Check out repository
        uses: actions/checkout@v5

      # 외부 private secrets store 접근
      - name: Check out Secrets store
        uses: actions/checkout@v5
        with:
          repository: 'dev-montyoh/secrets-store'
          token: ${{ secrets.SECRETS_STORE_ACCESS_TOKEN }}
          path: secrets-store

      # 외부 private secrets store 로드
      - name: Load secrets
        uses: ./secrets-store/.github/actions/load-secrets
        with:
          SECRETS_STORE_ACCESS_TOKEN: ${{ secrets.SECRETS_STORE_ACCESS_TOKEN }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.3

      # Terraform plan
      - name: Terraform Plan
        run: |
          terraform plan

#      - name: Upload Configuration
#        uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.0.0
#        id: plan-upload
#        with:
#          workspace: ${{ env.TF_WORKSPACE }}
#          directory: ${{ env.CONFIG_DIRECTORY }}
#          speculative: true
#
#      - name: Create Plan Run
#        uses: hashicorp/tfc-workflows-github/actions/create-run@v1.0.0
#        id: plan-run
#        with:
#          workspace: ${{ env.TF_WORKSPACE }}
#          configuration_version: ${{ steps.plan-upload.outputs.configuration_version_id }}
#          plan_only: true
#
#      - name: Get Plan Output
#        uses: hashicorp/tfc-workflows-github/actions/plan-output@v1.0.0
#        id: plan-output
#        with:
#          plan: ${{ fromJSON(steps.plan-run.outputs.payload).data.relationships.plan.data.id }}
#
#      - name: Update PR
#        uses: actions/github-script@v8
#        id: plan-comment
#        with:
#          github-token: ${{ secrets.SECRETS_STORE_ACCESS_TOKEN }}
#          script: |
#            // 1. Retrieve existing bot comments for the PR
#            const { data: comments } = await github.rest.issues.listComments({
#              owner: context.repo.owner,
#              repo: context.repo.repo,
#              issue_number: context.issue.number,
#            });
#            const botComment = comments.find(comment => {
#              return comment.user.type === 'Bot' && comment.body.includes('HCP Terraform Plan Output')
#            });
#            const output = `#### HCP Terraform Plan Output
#              \`\`\`
#              Plan: ${{ steps.plan-output.outputs.add }} to add, ${{ steps.plan-output.outputs.change }} to change, ${{ steps.plan-output.outputs.destroy }} to destroy.
#              \`\`\`
#              [HCP Terraform Plan](${{ steps.plan-run.outputs.run_link }})
#              `;
#            // 3. Delete previous comment so PR timeline makes sense
#            if (botComment) {
#              github.rest.issues.deleteComment({
#                owner: context.repo.owner,
#                repo: context.repo.repo,
#                comment_id: botComment.id,
#              });
#            }
#            github.rest.issues.createComment({
#              issue_number: context.issue.number,
#              owner: context.repo.owner,
#              repo: context.repo.repo,
#              body: output
#            });

#      # Terraform 세팅
#      - name: 'Set up Terraform'
#        uses: hashicorp/setup-terraform@v3
#
#      # Terraform 초기화 및 검증
#      - name: Terraform Init
#        run: terraform init -input=false
#
#      - name: Terraform Plan
#        run: terraform plan -no-color -input=false